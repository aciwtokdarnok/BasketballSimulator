@using System.ComponentModel
@using System.Linq
@using System.Reflection
@using BasketballSimulator.Core.Enums
@using BasketballSimulator.Core.Enums.Players
@using BasketballSimulator.Core.Models
@using BasketballSimulator.Core.Models.Players
@using BasketballSimulator.UI.Helpers
@using Microsoft.AspNetCore.Components

<table class="table table-hover table-sm table-striped table-borderless sticky-xx">
    <thead>
        <tr>
            @foreach (var col in Columns)
            {
                <th @onclick="() => OnSort(col.Field)" style="cursor:pointer;" title="@col.Title">
                    @col.Title
                    @if (SortField == col.Field)
                    {
                        <span>@(SortAscending ? " ↑" : " ↓")</span>
                    }
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @if (History == null || !History.Any())
        {
            <tr><td colspan="@Columns.Length" class="text-center">No history available</td></tr>
        }
        else
        {
            foreach (var entry in SortedHistory)
            {
                <tr>
                    <td>@entry.Year</td>
                    <td>@entry.Team</td>
                    <td>@entry.Age</td>
                    <td>@GetDescription(entry.Position)</td>
                    <td>@entry.Overall</td>
                    <td>@entry.Potential</td>
                    <td>@entry.Height</td>
                    <td>@entry.Weight</td>
                    <td>@entry.Intangibles</td>
                    <td>@entry.TotalAttributes</td>
                    <!-- Athleticism -->
                    <td>@entry.Athleticism.HeightRating</td>
                    <td>@entry.Athleticism.Speed</td>
                    <td>@entry.Athleticism.Agility</td>
                    <td>@entry.Athleticism.Strength</td>
                    <td>@entry.Athleticism.Vertical</td>
                    <td>@entry.Athleticism.Stamina</td>
                    <td>@entry.Athleticism.Hustle</td>
                    <td>@entry.Athleticism.OverallDurability</td>
                    <!-- OutsideScoring -->
                    <td>@entry.OutsideScoring.CloseShot</td>
                    <td>@entry.OutsideScoring.MidRangeShot</td>
                    <td>@entry.OutsideScoring.ThreePointShot</td>
                    <td>@entry.OutsideScoring.FreeThrow</td>
                    <td>@entry.OutsideScoring.ShotIQ</td>
                    <td>@entry.OutsideScoring.OffensiveConsistency</td>
                    <!-- InsideScoring -->
                    <td>@entry.InsideScoring.Layup</td>
                    <td>@entry.InsideScoring.StandingDunk</td>
                    <td>@entry.InsideScoring.DrivingDunk</td>
                    <td>@entry.InsideScoring.PostHook</td>
                    <td>@entry.InsideScoring.PostFade</td>
                    <td>@entry.InsideScoring.PostControl</td>
                    <td>@entry.InsideScoring.DrawFoul</td>
                    <td>@entry.InsideScoring.Hands</td>
                    <!-- Playmaking -->
                    <td>@entry.Playmaking.PassAccuracy</td>
                    <td>@entry.Playmaking.BallHandle</td>
                    <td>@entry.Playmaking.SpeedWithBall</td>
                    <td>@entry.Playmaking.PassIQ</td>
                    <td>@entry.Playmaking.PassVision</td>
                    <!-- Defense -->
                    <td>@entry.Defense.InteriorDefense</td>
                    <td>@entry.Defense.PerimeterDefense</td>
                    <td>@entry.Defense.Steal</td>
                    <td>@entry.Defense.Block</td>
                    <td>@entry.Defense.HelpDefenseIQ</td>
                    <td>@entry.Defense.PassPerception</td>
                    <td>@entry.Defense.DefensiveConsistency</td>
                    <!-- Rebounding -->
                    <td>@entry.Rebounding.OffensiveRebound</td>
                    <td>@entry.Rebounding.DefensiveRebound</td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    [Parameter]
    public IEnumerable<PlayerRatingHistory> History { get; set; }

    // Sorting state
    private string SortField { get; set; } = nameof(PlayerRatingHistory.Year);
    private bool SortAscending { get; set; } = true;

    // Define columns: Field name matches property, Title is header text
    private readonly (string Field, string Title)[] Columns = new[]
    {
        (nameof(PlayerRatingHistory.Year), "Year"),
        (nameof(PlayerRatingHistory.Team), "Team"),
        (nameof(PlayerRatingHistory.Age), "Age"),
        (nameof(PlayerRatingHistory.Position), "Pos"),
        (nameof(PlayerRatingHistory.Overall), "Ovr"),
        (nameof(PlayerRatingHistory.Potential), "Pot"),
        (nameof(PlayerRatingHistory.Height), "Hgt"),
        (nameof(PlayerRatingHistory.Weight), "Wgt"),
        (nameof(PlayerRatingHistory.Intangibles), "Intangibles"),
        (nameof(PlayerRatingHistory.TotalAttributes), "TotalAttr"),
        // Athleticism
        ("Athleticism.HeightRating", "Athl:Height"),
        ("Athleticism.Speed", "Athl:Speed"),
        ("Athleticism.Agility", "Athl:Agility"),
        ("Athleticism.Strength", "Athl:Strength"),
        ("Athleticism.Vertical", "Athl:Vertical"),
        ("Athleticism.Stamina", "Athl:Stamina"),
        ("Athleticism.Hustle", "Athl:Hustle"),
        ("Athleticism.OverallDurability", "Athl:Durability"),
        // OutsideScoring
        ("OutsideScoring.CloseShot", "Out:Close"),
        ("OutsideScoring.MidRangeShot", "Out:Mid"),
        ("OutsideScoring.ThreePointShot", "Out:3Pt"),
        ("OutsideScoring.FreeThrow", "Out:FT"),
        ("OutsideScoring.ShotIQ", "Out:ShotIQ"),
        ("OutsideScoring.OffensiveConsistency", "Out:Cons"),
        // InsideScoring
        ("InsideScoring.Layup", "In:Layup"),
        ("InsideScoring.StandingDunk", "In:StDunk"),
        ("InsideScoring.DrivingDunk", "In:DrDunk"),
        ("InsideScoring.PostHook", "In:Hook"),
        ("InsideScoring.PostFade", "In:Fade"),
        ("InsideScoring.PostControl", "In:PostCtrl"),
        ("InsideScoring.DrawFoul", "In:DrawFoul"),
        ("InsideScoring.Hands", "In:Hands"),
        // Playmaking
        ("Playmaking.PassAccuracy", "Play:PassAcc"),
        ("Playmaking.BallHandle", "Play:BallH"),
        ("Playmaking.SpeedWithBall", "Play:SpdBall"),
        ("Playmaking.PassIQ", "Play:PassIQ"),
        ("Playmaking.PassVision", "Play:Vision"),
        // Defense
        ("Defense.InteriorDefense", "Def:Int"),
        ("Defense.PerimeterDefense", "Def:Per"),
        ("Defense.Steal", "Def:Steal"),
        ("Defense.Block", "Def:Blk"),
        ("Defense.HelpDefenseIQ", "Def:HelpIQ"),
        ("Defense.PassPerception", "Def:PassPerc"),
        ("Defense.DefensiveConsistency", "Def:Cons"),
        // Rebounding
        ("Rebounding.OffensiveRebound", "Reb:Off"),
        ("Rebounding.DefensiveRebound", "Reb:Def")
    };

    // Returns sorted history based on current sort settings
    private IEnumerable<PlayerRatingHistory> SortedHistory =>
        History.OrderByDynamic(SortField, SortAscending);

    private void OnSort(string field)
    {
        if (SortField == field)
            SortAscending = !SortAscending;
        else
        {
            SortField = field;
            SortAscending = true;
        }
    }

    // Helper to read enum Description attribute
    private string GetDescription(Position position)
    {
        var fi = position.GetType().GetField(position.ToString());
        var attr = fi.GetCustomAttribute<DescriptionAttribute>();
        return attr?.Description ?? position.ToString();
    }
}
